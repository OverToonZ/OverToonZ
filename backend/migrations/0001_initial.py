# Generated by Django 4.2.15 on 2024-09-07 15:33

import backend.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_mysql.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('favourite_anime', models.CharField(default='NaN', max_length=100)),
                ('login_count', models.IntegerField(default=0)),
                ('last_login', models.DateTimeField(default=backend.models.IST_time)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AnimeInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('img_src', models.URLField(max_length=150)),
                ('studio', models.CharField(max_length=50)),
                ('seasons', models.IntegerField(default=1)),
                ('episodes', models.IntegerField(default=0)),
                ('avail_lang', models.CharField(max_length=5)),
                ('rating', models.DecimalField(decimal_places=1, max_digits=3)),
                ('status', models.CharField(max_length=10)),
                ('updated', models.DateTimeField(default=backend.models.IST_time)),
                ('genre', django_mysql.models.ListCharField(models.CharField(max_length=10), max_length=66, size=6)),
            ],
        ),
        migrations.CreateModel(
            name='SeasonInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season_count', models.IntegerField(default=1)),
                ('episode_count', models.IntegerField(default=1)),
                ('season_title', models.CharField(max_length=100)),
                ('season_cover', models.URLField(max_length=150)),
                ('season_banner', models.URLField(max_length=150)),
                ('description', models.CharField(max_length=1000)),
                ('status', models.CharField(max_length=10)),
                ('updatedon', models.DateTimeField(default=backend.models.IST_time)),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons_model', to='backend.animeinfo')),
            ],
        ),
        migrations.CreateModel(
            name='EpisodesInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('episode', models.IntegerField(default=1)),
                ('static_count', models.IntegerField(default=1)),
                ('code', models.CharField(default='S01EP01', max_length=8)),
                ('episode_title', models.CharField(max_length=100)),
                ('episode_cover', models.URLField(max_length=150)),
                ('views', models.IntegerField(default=0)),
                ('episode_link', models.URLField(max_length=350)),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='episodes_model', to='backend.animeinfo')),
                ('season', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='episodes_model', to='backend.seasoninfo')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commenttype', models.CharField(max_length=255)),
                ('visibility', models.CharField(max_length=10)),
                ('comment', models.TextField()),
                ('reply', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(default=backend.models.IST_time)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
